extends layout

block content
  .container
    input#pac-input(placeholder="Your address", type="text")    
    div#mapa
    script.
      var map, pos;
      
      var cidCampeador= {lat: -34.607576, lng: -58.445711};
      navigator.geolocation.getCurrentPosition(function(position) {
      pos = {
      lat: position.coords.latitude,
      lng: position.coords.longitude}
      });
      
      function initMap() {      
      map = new google.maps.Map(document.getElementById('mapa'), {
      center: pos,
      zoom: 15
      });        
      var infoWindow = new google.maps.InfoWindow({map: map});      
      infoWindow.setPosition(pos);
      infoWindow.setContent('otra cosa!');
      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
      });
      var markers = [];
      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();
      if (places.length == 0) {return;}
      // Clear out the old markers.
      markers.forEach(function(marker) {
      marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
      if (!place.geometry) {
      console.log("Returned place contains no geometry");
      return;
      }
      var icon = {
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(25, 25)
      };
      // Create a marker for each place.
      markers.push(new google.maps.Marker({
      map: map,
      icon: icon,
      title: place.name,
      position: place.geometry.location
      }));

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
      bounds.union(place.geometry.viewport);
      } else {
      bounds.extend(place.geometry.location);
      }
      });
      map.fitBounds(bounds);
      });
      }
    script(async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCpI1dm4HaiIrP5v4B9SNtQ6xdJxNlhwWs&v=3&libraries=places&callback=initMap")
    


    div class="input-group">
      <span class="input-group-btn">
        <button class="btn btn-secondary" type="button">Go!</button>


        .input-group
          span.input-group-btn
            button.btn.btn-secondary(type= "button")
              span.glyphicon.glyphicon-ok

              input-group-addon
              <span class="glyphicons glyphicons-ok-circle"></span>